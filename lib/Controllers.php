<?phpclass Controllers extends Core{	public function registrationAct() 	{		if ( empty($_POST['login']) || empty($_POST['password']) || empty($_POST['password2']) || empty($_POST['mail']) || ($_POST['lic'] != "ok") ) die ('Не все поля заполнены');		if ( !preg_match('/^([a-z0-9])(\w|\.|-|_)+([a-z0-9])@([a-z0-9])([a-z0-9.-]*)([a-z0-9])([.]{1})([a-z]{2,4})$/is', $_POST['mail']) ) die ('ERROR'); 		if ( !preg_match('/^([a-zA-Z0-9])(\w|-|_)+([a-z0-9])$/is', $_POST['login']) ) die ('ERROR'); 		if ( strlen($_POST['password']) < 5 ) die ('ERROR');  		if ( $_POST['password'] != $_POST['password2'] ) die ('ERROR');		$login = $_POST['login'];	    if ( $this->pdo->query('SELECT 1 FROM users WHERE login='.$this->pdo->quote($_POST['login']))->fetchColumn() ) die('ERROR:Login уже существует'); 			if ( $this->pdo->prepare('INSERT INTO users SET login=?,password=?,mail=?,reg_date=?,last_act=?')->execute(array(		    	$_POST['login'],		        sha1($_POST['password']),		        $_POST['mail'],		        $this->datetime,		        $this->datetime	    	))		);	   	die ('OK');	}   	public function authorizationAct()	{	    if ( empty($_POST['login']) || empty($_POST['password']) ) die('ERROR:Не заполнены обязательные поля');	    if ( !$user = $this->pdo->query('SELECT * FROM users WHERE login='.$this->pdo->quote($_POST['login']).' LIMIT 1')->fetch(PDO::FETCH_ASSOC) ) die('ERROR:Login не найден');	    if ( $user['password'] != sha1($_POST['password']) ) die('ERROR:Не верный пароль');	    $this->pdo->prepare("UPDATE users SET last_act='$tm' WHERE id=" .$user['id']);	    $_SESSION['AUTH'][0] = $user['id'];	    $_SESSION['AUTH'][1] = $user['login'];	    $_SESSION['AUTH'][2] = $user['password'];	    die('OK');	}	public function exitAct()	{			unset($_SESSION['AUTH']);		header("Location: login");	}	public function pageAct()	{			if( empty($_SESSION) )			header("Location: login");		$this->Templ = "page.smarty.html";		$per_page = 30;		$cur_page = 1;		if ( isset($_GET['page']) && $_GET['page'] > 0 ) 		    $cur_page = $_GET['page'];		$start = ($cur_page - 1) * $per_page;		$rows  = $this->pdo->query("SELECT COUNT(*) FROM `Products`")->fetchAll(PDO::FETCH_COLUMN);		$num_pages = ceil($rows[0]/$per_page);		$order = "ORDER BY ProductID";		$limit = "LIMIT $start,$per_page";		for ( $i=0; $i<=$num_pages; $i++ )		  	$PagCount[$i] = $i;			$this->Cont['name'] = $_GET['name'];	  	$this->Cont['pageQnt'] = $PagCount;	  	$this->Cont['page'] = $cur_page;		if ( !empty($_GET['name']) )		{			$order = "ORDER BY ".$_GET['name'];		}		$Cont = $this->pdo->query("SELECT * FROM `Products` $order $limit")->fetchAll(PDO::FETCH_ASSOC);		$this->Cont['data'] = $Cont;	}	public function loginAct()	{		$this->Templ = "login.smarty.html";	}	public function regAct()	{			$this->Templ = "reg.smarty.html";	}}